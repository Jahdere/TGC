@@ -162,6 +164,42 @@ struct MANGOS_DLL_DECL boss_leotheras_the_blindAI : public ScriptedAI
            m_pInstance->SetData(TYPE_LEOTHERAS_EVENT, FAIL);
    }

+	  // Custom threat management
+	  bool SelectHostileTarget()
+	  {
+		  Unit* pTarget = NULL;
+
+		  // No valid fixate target, taunt aura or taunt aura caster is dead, standard target selection
+		  if (!m_creature->getThreatManager().isThreatListEmpty())
+			  pTarget = m_creature->getThreatManager().getHostileTarget();
+
+		  if (pTarget)
+		  {
+			  if (m_bDemonForm)
+			  {
+				  if(pTarget->IsImmunedToDamage(SPELL_SCHOOL_MASK_FIRE) || !m_creature->IsWithinLOSInMap(pTarget) || !m_creature->IsWithinDistInMap(pTarget, 40.0f))
+				  {
+					  ThreatList const& threatList = m_creature->getThreatManager().getThreatList();
+					  for (ThreatList::const_iterator itr = threatList.begin(); itr != threatList.end(); ++itr)
+					  {
+						  if (Unit* pNewTarget = m_creature->GetMap()->GetUnit((*itr)->getUnitGuid()))
+						  {
+							  if (pNewTarget != pTarget && pNewTarget->GetTypeId() == TYPEID_PLAYER && !pNewTarget->IsImmunedToDamage(SPELL_SCHOOL_MASK_FIRE)
+							    && m_creature->IsWithinLOSInMap(pNewTarget) && m_creature->IsWithinDistInMap(pNewTarget, 40.0f))
+							  {
+									  AttackStart(pNewTarget);
+									  return true;
+							  }
+						  }
+					  }
+				  }
+			  }
+		  }
+
+		  // Will call EnterEvadeMode if fit
+		  return m_creature->SelectHostileTarget();
+	  }
+
    void UpdateAI(const uint32 uiDiff) override
    {
        // Banish the boss before combat
@@ -177,7 +215,7 @@ struct MANGOS_DLL_DECL boss_leotheras_the_blindAI : public ScriptedAI
        }

        // Return since we have no target
-        if (!m_creature->SelectHostileTarget() || !m_creature->getVictim())
+        if (!SelectHostileTarget() || !m_creature->getVictim())
            return;